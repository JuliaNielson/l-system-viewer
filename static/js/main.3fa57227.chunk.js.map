{"version":3,"sources":["Turtle/Turtle.js","components/ViewPane.js","components/SystemRuleInput.js","components/SystemRulePane.js","components/SystemSelector.js","components/ControlPane.js","components/LSystemPane.js","App.js","serviceWorker.js","index.js"],"names":["Turtle","props","state","lastX","maxX","minX","lastY","maxY","minY","facing","getPath","bind","degrees","Math","PI","rules","symbol","resultRule","find","rule","drawRule","ruleString","result","Path2D","this","moveTo","split","forEach","charr","nextInstruction","findDrawRuleBySymbol","ruleState","symbolRules","type","value","moveLength","newX","cos","getAsRadians","newY","sin","lineTo","setState","width","height","React","Component","ViewPane","message","updateCanvas","generateString","canvas","refs","ctx","getContext","p","translate","stroke","replacementRule","axiom","iterations","parseInt","resultString","ii","workString","length","findReplacementRuleBySymbol","breakk","className","id","ref","SystemRuleInput","ruleSelections","val","push","key","ruleValueContent","title","DescriptionStrings","drawRuleParameterHeader","index","onChange","handleChange","maxLength","SystemRulePane","handleDrawSystem","handleDrawButton","ruleIndex","formHandler","iterationsDropDown","align","onClick","addRuleHandler","SystemSelector","systemSelections","SampleSystems","sampleSystems","element","displayName","loadSystem","ControlPane","style","textAlign","href","LSystemPane","handleForm","editSymbolRule","getSystemByDisplayName","viewPane","e","system","target","persist","includes","editDrawRule","prevState","changedRule","findRuleByIndex","newRules","splice","defaultValue","newValue","newRule","getNewRule","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3fa57227.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Turtle extends React.Component{\r\n    constructor(props)\r\n    {   \r\n        super(props);\r\n        this.state = {\r\n            lastX:320, \r\n            maxX:320, \r\n            minX:320,\r\n            lastY:320, \r\n            maxY:320, \r\n            minY:320,\r\n            facing:-90\r\n        }\r\n\r\n        this.getPath = this.getPath.bind(this);\r\n    }\r\n\r\n    getAsRadians(degrees){\r\n        return(degrees * Math.PI/180);\r\n    }\r\n\r\n    findDrawRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.drawRule : \"\";\r\n    }\r\n\r\n    getPath(ruleString){\r\n        let result = new Path2D();\r\n        let facing = this.state.facing;\r\n        let lastX = this.state.lastX;\r\n        let lastY = this.state.lastY;\r\n        let maxX = this.state.maxX;\r\n        let minX = this.state.minX;\r\n        let maxY = this.state.maxY;\r\n        let minY = this.state.minY;\r\n        result.moveTo(lastX, lastY);\r\n        ruleString.split(\"\").forEach((charr) => {\r\n            let nextInstruction = this.findDrawRuleBySymbol(this.props.ruleState.symbolRules, charr);\r\n            if(\"None\" === nextInstruction.type){\r\n                //no-op\r\n            }\r\n            else if(\"AnglePos\" === nextInstruction.type){\r\n                facing += nextInstruction.value;\r\n            }\r\n            else if(\"AngleNeg\" === nextInstruction.type){\r\n                facing -= nextInstruction.value;\r\n            }\r\n            else if(\"Move\" === nextInstruction.type){\r\n                let moveLength = nextInstruction.value;\r\n\r\n                let newX = lastX + (moveLength * Math.cos(this.getAsRadians(facing)));\r\n                let newY = lastY + (moveLength * Math.sin(this.getAsRadians(facing)));\r\n\r\n                result.lineTo(newX, newY);\r\n                lastX = newX;\r\n                lastY = newY;\r\n\r\n                if (newX > maxX){\r\n                    maxX = newX;\r\n                }\r\n                else if(newX<minX){\r\n                    minX = newX;\r\n                }\r\n                if(newY > maxY){\r\n                    maxY = newY;\r\n                }\r\n                else if(newY < minY){\r\n                    minY = newY;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            facing:facing, \r\n            lastX:lastX, \r\n            lastY:lastY, \r\n            maxX:maxX, \r\n            minX:minX, \r\n            maxY:maxY, \r\n            minY:minY\r\n        });\r\n\r\n        minX = minX - 20;\r\n        minY--;\r\n        let width = maxX - minX + 20 ;\r\n        let height = maxY - minY + 20;\r\n\r\n        return {result, minX, minY, width, height};\r\n    }\r\n\r\n}\r\n\r\nexport default Turtle;","import React from 'react';\r\nimport '../App.css';\r\nimport Turtle from '../Turtle/Turtle';\r\n\r\nclass ViewPane extends React.Component {\r\n    constructor(props){\r\n        //props.ruleState;\r\n        super(props);\r\n        this.state = {\r\n            message: \"\"\r\n        }\r\n\r\n        this.updateCanvas = this.updateCanvas.bind(this);\r\n        this.generateString = this.generateString.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas(){\r\n        let ruleString = this.generateString();\r\n\r\n        const canvas = this.refs.canvas;\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        if (ruleString)\r\n        {\r\n            let turtle = new Turtle(this.props);\r\n            let p = turtle.getPath(ruleString);\r\n            canvas.width = p.width;\r\n            canvas.height = p.height;\r\n            ctx.translate(p.minX*-1, p.minY*-1);\r\n            ctx.stroke(p.result);\r\n        }\r\n        \r\n    }\r\n    \r\n    // fitToContainer(canvas){\r\n    //     const viewDiv = document.getElementById(\"viewPane\");\r\n    //     canvas.width = viewDiv.offsetWidth;\r\n    //     canvas.height = viewDiv.offsetHeight;\r\n\r\n    // }\r\n\r\n    findReplacementRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.replacementRule : symbol;\r\n    }\r\n    \r\n    generateString(){\r\n        const rules = this.props.ruleState.symbolRules;\r\n        const axiom = this.props.ruleState.axiom;\r\n        const iterations = parseInt(this.props.ruleState.iterations);\r\n        let resultString = axiom;\r\n        for (let ii = 0; ii < iterations; ii++) {\r\n            let workString = \"\";\r\n            if (resultString.length < 250000)\r\n            {\r\n                resultString.split(\"\").forEach(charr => {\r\n                    workString += this.findReplacementRuleBySymbol(rules, charr);\r\n                });\r\n\r\n                resultString = workString;\r\n            }\r\n            else{\r\n                this.setState({\r\n                    message: \"That drawing may cause your browser to slow down, so it was canceled instead. Try using a smaller value for the iterations.\"\r\n                });\r\n                return axiom;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            ruleString: resultString,\r\n            message: \"\"\r\n        });\r\n\r\n        return resultString;\r\n    }\r\n    \r\n    render(){\r\n        let breakk = this.state.message === null ? \"\" : <br/>;\r\n        return (\r\n            <div className=\"View-pane\" id=\"viewPane\">\r\n                {this.state.message}\r\n                {breakk}\r\n                <canvas ref=\"canvas\">\r\n                Your browser does not support the HTML5 canvas tag or you're looking at a search engine preview or something.\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewPane;\r\n","import React, {Component} from 'react';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\nclass SystemRuleInput extends Component{\r\n\r\n    render(){\r\n        let ruleTypes =[{\r\n            type:\"Move\",val:10\r\n        },{\r\n            type:\"AnglePos\",val:90\r\n        },{\r\n            type:\"AngleNeg\",val:90\r\n        },{\r\n            type:\"None\"\r\n        }]\r\n        let ruleSelections = [];\r\n        ruleTypes.forEach((rule)=>{\r\n            ruleSelections.push(\r\n              <option key={rule} value={rule.type}>{rule.type}</option>  \r\n            );\r\n        });\r\n        let ruleValueContent = this.props.rule.drawRule.type===\"None\" ? \"\":\r\n            <input type=\"Text\" \r\n            className=\"drawRuleValue\" \r\n            title={DescriptionStrings.drawRuleParameterHeader}\r\n            id={this.props.index}\r\n            value={this.props.rule.drawRule.value} \r\n            onChange={this.props.handleChange}/>;\r\n        \r\n\r\n        return(\r\n            <tr> \r\n                <td> \r\n                    <input type=\"Text\" \r\n                    className=\"symbol\" \r\n                    maxLength=\"1\" \r\n                    id={this.props.index}\r\n                    title={DescriptionStrings.symbol} \r\n                    value={this.props.rule.symbol} \r\n                    onChange = {this.props.handleChange}/>\r\n                </td>\r\n                <td> \r\n                    <input type=\"Text\" \r\n                    className=\"replacementRule\" \r\n                    title={DescriptionStrings.replacementRule} \r\n                    id={this.props.index} \r\n                    value={this.props.rule.replacementRule} \r\n                    onChange = {this.props.handleChange}/>\r\n                </td>\r\n\r\n                <td> \r\n                    <select className=\"drawRuleType\" \r\n                    id={this.props.index} \r\n                    title={DescriptionStrings.drawRule} \r\n                    value={this.props.rule.drawRule.type} \r\n                    onChange={this.props.handleChange}>\r\n                        {ruleSelections}\r\n                    </select>    \r\n                </td>\r\n                <td>\r\n                    {ruleValueContent}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRuleInput;","import React, {Component} from 'react';\r\nimport SystemRuleInput from './SystemRuleInput';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\n\r\nclass SystemRulePane extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.handleDrawSystem = this.handleDrawSystem.bind(this);\r\n    }\r\n\r\n    handleDrawSystem(){\r\n        this.props.handleDrawButton();\r\n    }\r\n\r\n    render(){\r\n        const rules = [];\r\n\r\n        this.props.ruleState.symbolRules.forEach((rule)=>{\r\n            rules.push(\r\n                <SystemRuleInput \r\n                    key={rule.ruleIndex} \r\n                    index={rule.ruleIndex} \r\n                    rule={rule} \r\n                    handleChange={this.props.formHandler}\r\n                />\r\n            );\r\n\r\n        });\r\n\r\n        const iterationsDropDown = [];\r\n        for (let ii = 1; ii <= 20; ii++) {\r\n            iterationsDropDown.push(\r\n                <option key={ii} value={ii}>{ii}</option>\r\n            );\r\n            \r\n        }\r\n\r\n        return (\r\n            <div> \r\n            <table align=\"center\">\r\n                <tbody>                \r\n                    <tr>\r\n                        <td title={DescriptionStrings.axiom}>Axiom</td>\r\n                        <td title={DescriptionStrings.iterations}>Iterations</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <input type=\"Text\" className=\"axiom\" title={DescriptionStrings.axiom} value={this.props.ruleState.axiom} onChange={this.props.formHandler}/>\r\n                        </td>\r\n                        <td>\r\n                            <select title={DescriptionStrings.iterations} value={this.props.ruleState.iterations} className=\"iterations\" onChange={this.props.formHandler}>\r\n                                {iterationsDropDown}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td title={DescriptionStrings.symbol}>\r\n                            Symbol\r\n                        </td>\r\n                        <td title={DescriptionStrings.replacementRule}>\r\n                            Replacement Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRule}>\r\n                            Draw Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRuleParameterHeader}>Draw Rule Parameter</td>\r\n                    </tr>\r\n\r\n                    {rules}\r\n\r\n                    <tr>\r\n                        <td>\r\n                            <button onClick={this.props.addRuleHandler}>New Rule</button>\r\n                        </td>\r\n                        <td>\r\n                            <button onClick={this.handleDrawSystem}>Draw System</button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table>\r\n\r\n            \r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRulePane;","import React from 'react'\r\nimport SampleSystems from '../data/SampleSystems'\r\n\r\nclass SystemSelector extends React.Component{\r\n\r\n    render(){\r\n        let systemSelections =[];\r\n        SampleSystems.sampleSystems.forEach((element)=>{\r\n            systemSelections.push(\r\n                <option \r\n                    key={element.displayName} \r\n                    value={element.displayName}>\r\n                        {element.displayName}\r\n                </option>\r\n            );\r\n        })\r\n        return (<div>\r\n            <select className=\"ruleState\" value={this.props.ruleState.displayName} onChange={this.props.loadSystem}>\r\n                {systemSelections}\r\n            </select>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default SystemSelector;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport SystemRulePane from './SystemRulePane';\r\nimport SystemSelector from './SystemSelector';\r\n\r\nclass ControlPane extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Control-pane\">\r\n                <header className=\"App-header\">\r\n                    <p style={{ textAlign: 'center'}}>\r\n                        Welcome to Nielson's Lindenmayer System Viewer\r\n                    </p>\r\n                </header>\r\n                <p>\r\n                    A Lindenmayer System, or L-System, is a system for generating strings that can be interpreted as geometric shapes.\r\n                </p><p>\r\n                    Mouse over an input option to get an explanation of its purpose. For a greater understanding of L-Systems, see <a href=\"https://en.wikipedia.org/wiki/L-system\">Wikipedia</a>\r\n                </p>\r\n                <SystemRulePane\r\n                    className = \"System-rule-pane\"\r\n                    handleDrawButton={this.props.handleDrawButton} \r\n                    ruleState={this.props.ruleState} \r\n                    formHandler={this.props.formHandler} \r\n                    addRuleHandler={this.props.addRuleHandler}\r\n                />\r\n                \r\n                <SystemSelector\r\n                    ruleState={this.props.ruleState}\r\n                    // come back and use this displayName = {this.props.ruleState.displayName}\r\n                    loadSystem={this.props.loadSystem}\r\n                ></SystemSelector>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPane;\r\n","import React from 'react';\r\nimport ViewPane from './ViewPane';\r\nimport ControlPane from './ControlPane';\r\n\r\nimport SampleSystems from '../data/SampleSystems.json';\r\n\r\nclass LSystemPane extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            ruleState: SampleSystems.sampleSystems[0],\r\n            ruleString : \"\"\r\n        }\r\n        \r\n        this.handleDrawButton = this.handleDrawButton.bind(this);\r\n        this.addRuleHandler = this.addRuleHandler.bind(this);\r\n        this.handleForm = this.handleForm.bind(this);\r\n        this.editSymbolRule = this.editSymbolRule.bind(this);\r\n        this.getSystemByDisplayName = this.getSystemByDisplayName.bind(this);\r\n        this.loadSystem = this.loadSystem.bind(this);\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     document.body.classList.add(\"Body-format\");\r\n    // } delete when verfied that scrolling still works correctly\r\n    \r\n    render(){\r\n        return (\r\n            <div className = \"app\">\r\n                <ControlPane \r\n                    handleDrawButton={this.handleDrawButton} \r\n                    ruleState={this.state.ruleState} \r\n                    formHandler={this.handleForm}\r\n                    addRuleHandler={this.addRuleHandler}\r\n                    loadSystem={this.loadSystem}\r\n                ></ControlPane>\r\n                <ViewPane ref=\"viewPane\"\r\n                    ruleString={this.state.ruleString} \r\n                    ruleState={this.state.ruleState}\r\n                ></ViewPane>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleDrawButton(){\r\n        this.refs.viewPane.updateCanvas();\r\n    }\r\n\r\n    findRuleByIndex(rules, index){\r\n        const resultRule = rules.find((rule)=>{return rule.ruleIndex === index});\r\n        return resultRule;\r\n    }\r\n\r\n    getSystemByDisplayName(e){\r\n        const resultSystem = SampleSystems.sampleSystems.find((system)=> {return system.displayName === e.target.value});\r\n        return resultSystem;\r\n    }\r\n\r\n    handleForm(e){\r\n        e.persist();\r\n        if ([\"symbol\", \"replacementRule\"].includes(e.target.className)){\r\n            this.editSymbolRule(e);\r\n        }\r\n        else if([\"drawRuleType\",\"drawRuleValue\"].includes(e.target.className)){\r\n            this.editDrawRule(e);\r\n        }\r\n        else if([\"axiom\", \"iterations\"].includes(e.target.className)){\r\n            this.setState(prevState => ({\r\n                ruleState:{\r\n                    ...prevState.ruleState,\r\n                [e.target.className] : e.target.value\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    loadSystem(e){\r\n        let ruleState = this.getSystemByDisplayName(e);\r\n        this.setState({ruleState:ruleState}, this.handleDrawButton);\r\n        \r\n\r\n    }\r\n\r\n    editSymbolRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n        let index = parseInt(e.target.id, 10);\r\n        \r\n        //to-do: De-duplicate this and below use\r\n        let changedRule = this.findRuleByIndex(rules, index);\r\n        changedRule = {\r\n            ...changedRule,\r\n            [e.target.className]:e.target.value\r\n        }\r\n\r\n        let newRules = rules;\r\n        newRules.splice(index, 1, changedRule);\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                symbolRules: newRules                    \r\n            }\r\n        }));\r\n    }\r\n\r\n    editDrawRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n        let index = parseInt(e.target.id, 10);\r\n\r\n        let changedRule = this.findRuleByIndex(rules, index);\r\n        let drawRule = changedRule.drawRule;\r\n        if (\"drawRuleType\"===e.target.className){\r\n            let defaultValue = e.target.value === \"Move\" ? 10 : 90;\r\n            drawRule = {\r\n                type : e.target.value,\r\n                value : defaultValue,\r\n            }\r\n        }\r\n        else{\r\n            let newValue = e.target.value ? parseInt(e.target.value, 10) : 0;\r\n            drawRule = {\r\n                ...drawRule,\r\n                value: newValue\r\n            }\r\n        }\r\n\r\n        changedRule = {\r\n            ...changedRule,\r\n            drawRule:drawRule\r\n        }\r\n\r\n        let newRules = rules;\r\n        newRules.splice(index, 1, changedRule);\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                symbolRules: newRules                    \r\n            }}));\r\n    }\r\n\r\n    //consider always having an empty new rule and doing away with the button\r\n    addRuleHandler(e){\r\n        let rules = this.state.ruleState.symbolRules;\r\n        let newRule = this.getNewRule(rules);\r\n        rules.push(newRule);\r\n\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                    symbolRules : rules\r\n            }\r\n        }));\r\n    }\r\n\r\n    getNewRule(rules){\r\n        let nextIndex = rules.length;\r\n        return {\r\n            ruleIndex: nextIndex,\r\n            symbol: '',\r\n            replacementRule:\"\",\r\n            drawRule: {type:\"None\"}\r\n        }\r\n    }\r\n}\r\n\r\nexport default LSystemPane;\r\n","import React from 'react';\nimport LSystemPane from './components/LSystemPane';\n\nfunction App() {\n  return (\n    <LSystemPane className=\"L-system-pane\"/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Turtle/TurtleLocation.js","Turtle/Turtle.js","components/ViewPane.js","components/SystemRuleInput.js","components/SystemRulePane.js","components/SystemSelector.js","components/ControlPane.js","components/LSystemPane.js","App.js","serviceWorker.js","index.js"],"names":["TurtleLocation","xCoordinate","yCoordinate","facing","this","Turtle","props","state","lastX","maxX","minX","lastY","maxY","minY","parseInt","ruleState","getPath","bind","degrees","Math","PI","rules","symbol","resultRule","find","rule","drawRule","ruleString","result","Path2D","savedLocations","moveTo","split","forEach","charr","nextInstruction","findDrawRuleBySymbol","symbolRules","type","value","moveLength","newX","cos","getAsRadians","newY","sin","lineTo","max","min","newLocation","push","nextLocation","pop","setState","width","height","React","Component","ViewPane","message","updateCanvas","generateString","canvas","refs","ctx","getContext","p","translate","stroke","replacementRule","axiom","iterations","resultString","ii","workString","length","forceGenerate","newMessage","findReplacementRuleBySymbol","newLine","className","id","ref","SystemRuleInput","ruleSelections","ruleType","key","ruleValueContent","includes","title","DescriptionStrings","drawRuleParameterHeader","index","onChange","handleChange","onClick","removeRuleHandler","maxLength","size","SystemRulePane","ruleInputs","ruleIndex","formHandler","align","colSpan","handleDrawButton","checked","for","valign","addRuleHandler","SystemSelector","systemSelections","SampleSystems","sampleSystems","element","displayName","loadSystem","ControlPane","style","textAlign","href","LSystemPane","handleForm","editSymbolRule","getSystemByDisplayName","viewPane","e","persist","target","editDrawRule","prevState","changedRule","findRuleByIndex","newRules","splice","defaultValue","newValue","newRule","getNewRule","toRemove","indexOf","system","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.db3b3ebb.chunk.js","sourcesContent":["class TurtleLocation{\r\n    constructor(xCoordinate, yCoordinate, facing){\r\n        this.xCoordinate = xCoordinate;\r\n        this.yCoordinate = yCoordinate;\r\n        this.facing = facing;\r\n    }\r\n\r\n    getXCoordinate(){\r\n        return this.xCoordinate;\r\n    }\r\n\r\n    getYCoordinate(){\r\n        return this.yCoordinate;\r\n    }\r\n\r\n    getFacing(){\r\n        return this.facing;\r\n    }\r\n}\r\n\r\nexport default TurtleLocation;","import React from 'react'\r\nimport TurtleLocation from './TurtleLocation'\r\n\r\nclass Turtle extends React.Component{\r\n    constructor(props)\r\n    {   \r\n        super(props);\r\n        this.state = {\r\n            lastX:0, \r\n            maxX:0, \r\n            minX:0,\r\n            lastY:0, \r\n            maxY:0, \r\n            minY:0,\r\n            facing:parseInt(props.ruleState.facing,10)\r\n        }\r\n\r\n        this.getPath = this.getPath.bind(this);\r\n    }\r\n\r\n    getAsRadians(degrees){\r\n        return(degrees * Math.PI/180);\r\n    }\r\n\r\n    findDrawRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.drawRule : \"\";\r\n    }\r\n\r\n    getPath(ruleString){\r\n        let result = new Path2D();\r\n        let facing = this.state.facing;\r\n        let lastX = this.state.lastX;\r\n        let lastY = this.state.lastY;\r\n        let maxX = this.state.maxX;\r\n        let minX = this.state.minX;\r\n        let maxY = this.state.maxY;\r\n        let minY = this.state.minY;\r\n\r\n        let savedLocations = [];\r\n        result.moveTo(lastX, lastY);\r\n        ruleString.split(\"\").forEach((charr) => {\r\n            let nextInstruction = this.findDrawRuleBySymbol(this.props.ruleState.symbolRules, charr);\r\n            if(\"None\" === nextInstruction.type){\r\n                //no-op\r\n            }\r\n            else if(\"AnglePos\" === nextInstruction.type){\r\n                facing += nextInstruction.value;\r\n            }\r\n            else if(\"AngleNeg\" === nextInstruction.type){\r\n                facing -= nextInstruction.value;\r\n            }\r\n            else if(\"Move\" === nextInstruction.type){\r\n                let moveLength = nextInstruction.value;\r\n\r\n                let newX = lastX + (moveLength * Math.cos(this.getAsRadians(facing)));\r\n                let newY = lastY + (moveLength * Math.sin(this.getAsRadians(facing)));\r\n\r\n                result.lineTo(newX, newY);\r\n                lastX = newX;\r\n                lastY = newY;\r\n\r\n                maxX = Math.max(newX, maxX);\r\n                minX = Math.min(newX,minX);\r\n                \r\n                maxY = Math.max(newY, maxY);\r\n                minY = Math.min(newY,minY);\r\n                \r\n            }\r\n            else if(\"SaveLocation\" === nextInstruction.type){\r\n                let newLocation = new TurtleLocation(lastX, lastY, facing);\r\n                savedLocations.push(newLocation);\r\n            }\r\n            else if(\"LoadLocation\" === nextInstruction.type){\r\n                let nextLocation = savedLocations.pop();\r\n                lastX = nextLocation.xCoordinate;\r\n                lastY = nextLocation.yCoordinate;\r\n                facing = nextLocation.facing;\r\n\r\n                result.moveTo(lastX, lastY);\r\n\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            facing:facing, \r\n            lastX:lastX, \r\n            lastY:lastY, \r\n            maxX:maxX, \r\n            minX:minX, \r\n            maxY:maxY, \r\n            minY:minY\r\n        });\r\n\r\n        minX = minX - 20;\r\n        minY--;\r\n        let width = maxX - minX + 20 ;\r\n        let height = maxY - minY + 20;\r\n\r\n        return {result, minX, minY, width, height};\r\n    }\r\n\r\n}\r\n\r\nexport default Turtle;","import React from 'react';\r\nimport '../App.css';\r\nimport Turtle from '../Turtle/Turtle';\r\n\r\nclass ViewPane extends React.Component {\r\n    constructor(props){\r\n        //props.ruleState;\r\n        super(props);\r\n        this.state = {\r\n            message: \"\"\r\n        }\r\n\r\n        this.updateCanvas = this.updateCanvas.bind(this);\r\n        this.generateString = this.generateString.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas(){\r\n\r\n        let ruleString = this.generateString();\r\n\r\n        const canvas = this.refs.canvas;\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        if (ruleString)\r\n        {\r\n            let turtle = new Turtle(this.props);\r\n            let p = turtle.getPath(ruleString);\r\n            canvas.width = p.width;\r\n            canvas.height = p.height;\r\n            ctx.translate(p.minX*-1, p.minY*-1);\r\n            ctx.stroke(p.result);\r\n        }\r\n        \r\n    }\r\n    \r\n    findReplacementRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.replacementRule : symbol;\r\n    }\r\n    \r\n    generateString(){\r\n        const rules = this.props.ruleState.symbolRules;\r\n        const axiom = this.props.ruleState.axiom;\r\n        const iterations = parseInt(this.props.ruleState.iterations);\r\n        let resultString = axiom;\r\n        for (let ii = 0; ii < iterations; ii++) {\r\n            let workString = \"\";\r\n            if (resultString.length < 250000 || (this.props.forceGenerate))\r\n            {\r\n                resultString.split(\"\").forEach(charr => {\r\n                    workString += this.findReplacementRuleBySymbol(rules, charr);\r\n                });\r\n\r\n                resultString = workString;\r\n            }\r\n            else{\r\n                let newMessage = \"That drawing may cause your browser to slow down, so it was canceled instead. Try using a value of \" + (ii) + \" for the iterations.\"\r\n                this.setState({\r\n                    message: newMessage\r\n                });\r\n                return axiom;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            ruleString: resultString,\r\n            message: \"\"\r\n        });\r\n\r\n        return resultString;\r\n    }\r\n    \r\n    render(){\r\n        let newLine = this.state.message === null ? \"\" : <br/>;\r\n        return (\r\n            <div className=\"View-pane\" id=\"viewPane\">\r\n                {this.state.message}\r\n                {newLine}\r\n                <canvas ref=\"canvas\">\r\n                Your browser does not support the HTML5 canvas tag or you're looking at a search engine preview or something.\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewPane;\r\n","import React, {Component} from 'react';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\nclass SystemRuleInput extends Component{\r\n\r\n    render(){\r\n        let ruleTypes =[\"Move\", \"AnglePos\", \"AngleNeg\", \"SaveLocation\", \"LoadLocation\", \"None\"]\r\n        let ruleSelections = [];\r\n        ruleTypes.forEach((ruleType)=>{\r\n            ruleSelections.push(\r\n              <option key={ruleType} value={ruleType}>{ruleType}</option>  \r\n            );\r\n        });\r\n        let ruleValueContent = [\"Move\", \"AnglePos\", \"AngleNeg\"].includes(this.props.rule.drawRule.type) \r\n        ?\r\n            <input \r\n                type=\"Number\" \r\n                className=\"drawRuleValue\" \r\n                title={DescriptionStrings.drawRuleParameterHeader}\r\n                id={this.props.index}\r\n                value={this.props.rule.drawRule.value} \r\n                onChange={this.props.handleChange}\r\n\r\n            />\r\n        :\r\n             \"\" ; \r\n\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    <button className=\"removeRule\" id={this.props.index} onClick={this.props.removeRuleHandler}>-</button><br/>\r\n                </td> \r\n                <td> \r\n                    <input \r\n                        type=\"Text\" \r\n                        className=\"symbol\" \r\n                        maxLength=\"1\" \r\n                        size=\"2\"\r\n                        id={this.props.index}\r\n                        title={DescriptionStrings.symbol} \r\n                        value={this.props.rule.symbol} \r\n                        onChange = {this.props.handleChange}\r\n                    />\r\n                </td>\r\n                <td> \r\n                    <input \r\n                        type=\"Text\" \r\n                        className=\"replacementRule\" \r\n                        title={DescriptionStrings.replacementRule} \r\n                        id={this.props.index} \r\n                        value={this.props.rule.replacementRule} \r\n                        onChange={this.props.handleChange}\r\n                    />\r\n                </td>\r\n\r\n                <td> \r\n                    <select \r\n                        className=\"drawRuleType\" \r\n                        id={this.props.index} \r\n                        title={DescriptionStrings.drawRule} \r\n                        value={this.props.rule.drawRule.type} \r\n                        onChange={this.props.handleChange}>\r\n                            {ruleSelections}\r\n                    </select>    \r\n                </td>\r\n                <td>\r\n                    {ruleValueContent}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRuleInput;","import React, {Component} from 'react';\r\nimport SystemRuleInput from './SystemRuleInput';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\n\r\nclass SystemRulePane extends Component{\r\n    render(){\r\n        const ruleInputs = [];\r\n        this.props.ruleState.symbolRules.forEach((rule)=>{\r\n            ruleInputs.push(\r\n                <SystemRuleInput \r\n                    key={rule.ruleIndex} \r\n                    index={rule.ruleIndex} \r\n                    rule={rule} \r\n                    handleChange={this.props.formHandler}\r\n                    removeRuleHandler={this.props.removeRuleHandler}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div> \r\n            <table align=\"center\">\r\n                <tbody>                \r\n                    <tr>\r\n                        <td title={DescriptionStrings.iterations}>Iterations</td>\r\n                        <td title={DescriptionStrings.axiom}>Axiom</td>\r\n                        <td title={DescriptionStrings.facing}>Initial Facing</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <input \r\n                                type=\"Number\" \r\n                                max={20} min={0}  \r\n                                title={DescriptionStrings.iterations} \r\n                                value={this.props.ruleState.iterations} \r\n                                className=\"iterations\" \r\n                                onChange={this.props.formHandler}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input \r\n                                type=\"Text\" \r\n                                className=\"axiom\" \r\n                                title={DescriptionStrings.axiom} \r\n                                value={this.props.ruleState.axiom} \r\n                                onChange={this.props.formHandler}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input \r\n                                type=\"Number\" \r\n                                max={360} \r\n                                min={-360} \r\n                                className=\"facing\"\r\n                                title={DescriptionStrings.facing} \r\n                                value={this.props.ruleState.facing} \r\n                                onChange={this.props.formHandler}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <table align=\"center\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td title={DescriptionStrings.symbol}>\r\n                            Symbol\r\n                        </td>\r\n                        <td title={DescriptionStrings.replacementRule}>\r\n                            Replacement Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRule}>\r\n                            Draw Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRuleParameterHeader}>\r\n                            Draw Rule <br/> Parameter\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {ruleInputs}\r\n\r\n                    <tr>\r\n                        <td colSpan = \"3\">\r\n                            <button onClick={this.props.handleDrawButton}>Draw System</button><br/>\r\n                            \r\n                            <input type=\"Checkbox\" className=\"forceGenerate\" id=\"forceGenerate\" onChange={this.props.formHandler} checked={this.props.forceGenerate}/>\r\n                            <label for=\"forceGenerate\">Force large system</label>\r\n                            \r\n                        </td>\r\n                        <td valign=\"top\">\r\n                            <button onClick={this.props.addRuleHandler}>New Rule</button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table>\r\n\r\n            \r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRulePane;","import React from 'react'\r\nimport SampleSystems from '../data/SampleSystems'\r\n\r\nclass SystemSelector extends React.Component{\r\n\r\n    render(){\r\n        let systemSelections =[];\r\n        SampleSystems.sampleSystems.forEach((element)=>{\r\n            systemSelections.push(\r\n                <option key={element.displayName}> {element.displayName}</option>\r\n            );\r\n        });\r\n        \r\n        return (\r\n            <div>\r\n                <select className=\"ruleState\" value={this.props.displayName} onChange={this.props.loadSystem}>\r\n                    {systemSelections}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SystemSelector;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport SystemRulePane from './SystemRulePane';\r\nimport SystemSelector from './SystemSelector';\r\n\r\nclass ControlPane extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Control-pane\">\r\n                <header className=\"App-header\">\r\n                    <p style={{ textAlign: 'center'}}>\r\n                        Welcome to Nielson's Lindenmayer System Viewer\r\n                    </p>\r\n                </header>\r\n                <p>\r\n                    A Lindenmayer System, or L-System, is a system for generating strings that can be interpreted as geometric shapes.\r\n                </p><p>\r\n                    Mouse over an input option to get an explanation of its purpose. For a greater understanding of L-Systems, see <a href=\"https://en.wikipedia.org/wiki/L-system\">Wikipedia</a>\r\n                </p>\r\n                <SystemRulePane\r\n                    className = \"System-rule-pane\"\r\n                    handleDrawButton={this.props.handleDrawButton} \r\n                    ruleState={this.props.ruleState} \r\n                    formHandler={this.props.formHandler} \r\n                    addRuleHandler={this.props.addRuleHandler}\r\n                    removeRuleHandler={this.props.removeRuleHandler}\r\n                    forceGenerate={this.props.forceGenerate}\r\n                />\r\n                \r\n                <SystemSelector\r\n                    displayName={this.props.ruleState.displayName}\r\n                    loadSystem={this.props.loadSystem}\r\n                ></SystemSelector>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPane;\r\n","import React from 'react';\r\nimport ViewPane from './ViewPane';\r\nimport ControlPane from './ControlPane';\r\n\r\nimport SampleSystems from '../data/SampleSystems.json';\r\n\r\nclass LSystemPane extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            ruleState: SampleSystems.sampleSystems[0],\r\n            forceGenerate: false\r\n        }\r\n        \r\n        this.handleDrawButton = this.handleDrawButton.bind(this);\r\n        this.addRuleHandler = this.addRuleHandler.bind(this);\r\n        this.handleForm = this.handleForm.bind(this);\r\n        this.editSymbolRule = this.editSymbolRule.bind(this);\r\n        this.getSystemByDisplayName = this.getSystemByDisplayName.bind(this);\r\n        this.loadSystem = this.loadSystem.bind(this);\r\n        this.removeRuleHandler = this.removeRuleHandler.bind(this);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"app\">\r\n                <ControlPane \r\n                    handleDrawButton={this.handleDrawButton} \r\n                    ruleState={this.state.ruleState} \r\n                    formHandler={this.handleForm}\r\n                    addRuleHandler={this.addRuleHandler}\r\n                    removeRuleHandler={this.removeRuleHandler}\r\n                    loadSystem={this.loadSystem}\r\n                    forceGenerate={this.state.forceGenerate}\r\n                ></ControlPane>\r\n                <ViewPane ref=\"viewPane\"\r\n                    ruleState={this.state.ruleState}\r\n                    forceGenerate={this.state.forceGenerate}\r\n                ></ViewPane>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleDrawButton(){\r\n        this.refs.viewPane.updateCanvas();\r\n    }\r\n\r\n    handleForm(e){\r\n        e.persist();\r\n        if ([\"symbol\", \"replacementRule\"].includes(e.target.className)){\r\n            this.editSymbolRule(e);\r\n        }\r\n        else if([\"drawRuleType\",\"drawRuleValue\"].includes(e.target.className)){\r\n            this.editDrawRule(e);\r\n        }\r\n        else if([\"axiom\", \"iterations\",\"facing\"].includes(e.target.className)){\r\n            this.setState(prevState => ({\r\n                ruleState:{\r\n                    ...prevState.ruleState,\r\n                [e.target.className] : e.target.value\r\n                }\r\n            }));\r\n        }\r\n        else if([\"forceGenerate\"].includes(e.target.className)){\r\n            this.setState({[e.target.className] : e.target.checked})\r\n        }\r\n    }\r\n\r\n    editSymbolRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n        let index = parseInt(e.target.id, 10);\r\n        \r\n        let changedRule = this.findRuleByIndex(rules, index);\r\n        changedRule = {\r\n            ...changedRule,\r\n            [e.target.className]:e.target.value\r\n        }\r\n\r\n        let newRules = rules;\r\n        newRules.splice(index, 1, changedRule);\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                symbolRules: newRules                    \r\n            }\r\n        }));\r\n    }\r\n\r\n    editDrawRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n        let index = parseInt(e.target.id, 10);\r\n\r\n        let changedRule = this.findRuleByIndex(rules, index);\r\n        let drawRule = changedRule.drawRule;\r\n        if (\"drawRuleType\"===e.target.className){\r\n            let defaultValue = e.target.value === \"Move\" ? 10 : 90;\r\n            drawRule = {\r\n                type : e.target.value,\r\n                value : defaultValue,\r\n            }\r\n        }\r\n        else{\r\n            let newValue = e.target.value ? parseInt(e.target.value, 10) : 0;\r\n            drawRule = {\r\n                ...drawRule,\r\n                value: newValue\r\n            }\r\n        }\r\n\r\n        changedRule = {\r\n            ...changedRule,\r\n            drawRule:drawRule\r\n        }\r\n\r\n        let newRules = rules;\r\n        newRules.splice(index, 1, changedRule);\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                symbolRules: newRules                    \r\n            }}));\r\n    }\r\n\r\n    addRuleHandler(e){\r\n        let rules = this.state.ruleState.symbolRules;\r\n        let newRule = this.getNewRule(rules);\r\n        rules.push(newRule);\r\n\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                    symbolRules : rules\r\n            }\r\n        }));\r\n    }\r\n\r\n    removeRuleHandler(e){\r\n        let rules = this.state.ruleState.symbolRules;\r\n        let toRemove = this.findRuleByIndex(rules, parseInt(e.target.id, 10));\r\n        let index = rules.indexOf(toRemove);\r\n        if (index !== -1){\r\n            rules.splice(index, 1);\r\n            this.setState(prevState => ({\r\n                ...prevState.ruleState,\r\n                    symbolRules: rules\r\n            }))\r\n        }\r\n    }\r\n\r\n    findRuleByIndex(rules, index){\r\n        const resultRule = rules.find((rule)=>{return rule.ruleIndex === index});\r\n        return resultRule;\r\n    }\r\n\r\n    getSystemByDisplayName(e){\r\n        const resultSystem = SampleSystems.sampleSystems.find((system)=> {return system.displayName === e.target.value});\r\n        return resultSystem;\r\n    }\r\n\r\n    loadSystem(e){\r\n        let ruleState = this.getSystemByDisplayName(e);\r\n        this.setState({ruleState:ruleState}, this.handleDrawButton);\r\n    }\r\n\r\n    getNewRule(rules){\r\n        let nextIndex = rules.length;\r\n        return {\r\n            ruleIndex: nextIndex,\r\n            symbol: '',\r\n            replacementRule:\"\",\r\n            drawRule: {type:\"None\"}\r\n        }\r\n    }\r\n}\r\n\r\nexport default LSystemPane;\r\n","import React from 'react';\r\nimport LSystemPane from './components/LSystemPane';\r\n\r\nfunction App() {\r\n  return (\r\n    <LSystemPane className=\"L-system-pane\"/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["Turtle/Turtle.js","components/ViewPane.js","components/SystemRuleInput.js","components/SystemRulePane.js","components/SystemSelector.js","components/ControlPane.js","components/LSystemPane.js","App.js","serviceWorker.js","index.js"],"names":["Turtle","props","state","lastX","maxX","minX","lastY","maxY","minY","facing","ruleState","getPath","bind","degrees","Math","PI","rules","symbol","resultRule","find","rule","drawRule","ruleString","result","Path2D","this","moveTo","split","forEach","charr","nextInstruction","findDrawRuleBySymbol","symbolRules","type","value","moveLength","newX","cos","getAsRadians","newY","sin","lineTo","max","min","setState","width","height","React","Component","ViewPane","message","updateCanvas","generateString","canvas","refs","ctx","getContext","p","translate","stroke","replacementRule","axiom","iterations","parseInt","resultString","ii","workString","length","newMessage","findReplacementRuleBySymbol","newLine","className","id","ref","SystemRuleInput","ruleSelections","ruleType","push","key","ruleValueContent","title","DescriptionStrings","drawRuleParameterHeader","index","onChange","handleChange","maxLength","size","SystemRulePane","ruleInputs","ruleIndex","formHandler","iterationsDropDown","align","onClick","handleDrawButton","addRuleHandler","SystemSelector","systemSelections","SampleSystems","sampleSystems","element","displayName","loadSystem","ControlPane","style","textAlign","href","LSystemPane","handleForm","editSymbolRule","getSystemByDisplayName","viewPane","e","persist","includes","target","editDrawRule","prevState","changedRule","findRuleByIndex","newRules","splice","defaultValue","newValue","newRule","getNewRule","system","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0e9e9882.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Turtle extends React.Component{\r\n    constructor(props)\r\n    {   \r\n        super(props);\r\n        this.state = {\r\n            lastX:0, \r\n            maxX:0, \r\n            minX:0,\r\n            lastY:0, \r\n            maxY:0, \r\n            minY:0,\r\n            facing:props.ruleState.facing\r\n        }\r\n\r\n        this.getPath = this.getPath.bind(this);\r\n    }\r\n\r\n    getAsRadians(degrees){\r\n        return(degrees * Math.PI/180);\r\n    }\r\n\r\n    findDrawRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.drawRule : \"\";\r\n    }\r\n\r\n    getPath(ruleString){\r\n        let result = new Path2D();\r\n        let facing = this.state.facing;\r\n        let lastX = this.state.lastX;\r\n        let lastY = this.state.lastY;\r\n        let maxX = this.state.maxX;\r\n        let minX = this.state.minX;\r\n        let maxY = this.state.maxY;\r\n        let minY = this.state.minY;\r\n        result.moveTo(lastX, lastY);\r\n        ruleString.split(\"\").forEach((charr) => {\r\n            let nextInstruction = this.findDrawRuleBySymbol(this.props.ruleState.symbolRules, charr);\r\n            if(\"None\" === nextInstruction.type){\r\n                //no-op\r\n            }\r\n            else if(\"AnglePos\" === nextInstruction.type){\r\n                facing += nextInstruction.value;\r\n            }\r\n            else if(\"AngleNeg\" === nextInstruction.type){\r\n                facing -= nextInstruction.value;\r\n            }\r\n            else if(\"Move\" === nextInstruction.type){\r\n                let moveLength = nextInstruction.value;\r\n\r\n                let newX = lastX + (moveLength * Math.cos(this.getAsRadians(facing)));\r\n                let newY = lastY + (moveLength * Math.sin(this.getAsRadians(facing)));\r\n\r\n                result.lineTo(newX, newY);\r\n                lastX = newX;\r\n                lastY = newY;\r\n\r\n                maxX = Math.max(newX, maxX);\r\n                minX = Math.min(newX,minX);\r\n                \r\n                maxY = Math.max(newY, maxY);\r\n                minY = Math.min(newY,minY);\r\n                \r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            facing:facing, \r\n            lastX:lastX, \r\n            lastY:lastY, \r\n            maxX:maxX, \r\n            minX:minX, \r\n            maxY:maxY, \r\n            minY:minY\r\n        });\r\n\r\n        minX = minX - 20;\r\n        minY--;\r\n        let width = maxX - minX + 20 ;\r\n        let height = maxY - minY + 20;\r\n\r\n        return {result, minX, minY, width, height};\r\n    }\r\n\r\n}\r\n\r\nexport default Turtle;","import React from 'react';\r\nimport '../App.css';\r\nimport Turtle from '../Turtle/Turtle';\r\n\r\nclass ViewPane extends React.Component {\r\n    constructor(props){\r\n        //props.ruleState;\r\n        super(props);\r\n        this.state = {\r\n            message: \"\"\r\n        }\r\n\r\n        this.updateCanvas = this.updateCanvas.bind(this);\r\n        this.generateString = this.generateString.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas(){\r\n\r\n        let ruleString = this.generateString();\r\n\r\n        const canvas = this.refs.canvas;\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        if (ruleString)\r\n        {\r\n            let turtle = new Turtle(this.props);\r\n            let p = turtle.getPath(ruleString);\r\n            canvas.width = p.width;\r\n            canvas.height = p.height;\r\n            ctx.translate(p.minX*-1, p.minY*-1);\r\n            ctx.stroke(p.result);\r\n        }\r\n        \r\n    }\r\n    \r\n    findReplacementRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.replacementRule : symbol;\r\n    }\r\n    \r\n    generateString(){\r\n        const rules = this.props.ruleState.symbolRules;\r\n        const axiom = this.props.ruleState.axiom;\r\n        const iterations = parseInt(this.props.ruleState.iterations);\r\n        let resultString = axiom;\r\n        for (let ii = 0; ii < iterations; ii++) {\r\n            let workString = \"\";\r\n            if (resultString.length < 250000)\r\n            {\r\n                resultString.split(\"\").forEach(charr => {\r\n                    workString += this.findReplacementRuleBySymbol(rules, charr);\r\n                });\r\n\r\n                resultString = workString;\r\n            }\r\n            else{\r\n                let newMessage = \"That drawing may cause your browser to slow down, so it was canceled instead. Try using a value of \" + (ii) + \" for the iterations.\"\r\n                this.setState({\r\n                    message: newMessage\r\n                });\r\n                return axiom;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            ruleString: resultString,\r\n            message: \"\"\r\n        });\r\n\r\n        return resultString;\r\n    }\r\n    \r\n    render(){\r\n        let newLine = this.state.message === null ? \"\" : <br/>;\r\n        return (\r\n            <div className=\"View-pane\" id=\"viewPane\">\r\n                {this.state.message}\r\n                {newLine}\r\n                <canvas ref=\"canvas\">\r\n                Your browser does not support the HTML5 canvas tag or you're looking at a search engine preview or something.\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewPane;\r\n","import React, {Component} from 'react';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\nclass SystemRuleInput extends Component{\r\n\r\n    render(){\r\n        let ruleTypes =[\"Move\", \"AnglePos\", \"AngleNeg\", \"None\"]\r\n        let ruleSelections = [];\r\n        ruleTypes.forEach((ruleType)=>{\r\n            ruleSelections.push(\r\n              <option key={ruleType} value={ruleType}>{ruleType}</option>  \r\n            );\r\n        });\r\n        let ruleValueContent = this.props.rule.drawRule.type === \"None\" ? \"\" :\r\n            <input \r\n                type=\"Number\" \r\n                className=\"drawRuleValue\" \r\n                title={DescriptionStrings.drawRuleParameterHeader}\r\n                id={this.props.index}\r\n                value={this.props.rule.drawRule.value} \r\n                onChange={this.props.handleChange}\r\n            />;\r\n\r\n        return(\r\n            <tr> \r\n                <td> \r\n                    <input \r\n                        type=\"Text\" \r\n                        className=\"symbol\" \r\n                        maxLength=\"1\" \r\n                        size=\"2\"\r\n                        id={this.props.index}\r\n                        title={DescriptionStrings.symbol} \r\n                        value={this.props.rule.symbol} \r\n                        onChange = {this.props.handleChange}\r\n                    />\r\n                </td>\r\n                <td> \r\n                    <input \r\n                        type=\"Text\" \r\n                        className=\"replacementRule\" \r\n                        title={DescriptionStrings.replacementRule} \r\n                        id={this.props.index} \r\n                        value={this.props.rule.replacementRule} \r\n                        onChange = {this.props.handleChange}\r\n                    />\r\n                </td>\r\n\r\n                <td> \r\n                    <select \r\n                        className=\"drawRuleType\" \r\n                        id={this.props.index} \r\n                        title={DescriptionStrings.drawRule} \r\n                        value={this.props.rule.drawRule.type} \r\n                        onChange={this.props.handleChange}>\r\n\r\n                            {ruleSelections}\r\n                    </select>    \r\n                </td>\r\n                <td>\r\n                    {ruleValueContent}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRuleInput;","import React, {Component} from 'react';\r\nimport SystemRuleInput from './SystemRuleInput';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\n\r\nclass SystemRulePane extends Component{\r\n    render(){\r\n        const ruleInputs = [];\r\n        this.props.ruleState.symbolRules.forEach((rule)=>{\r\n            ruleInputs.push(\r\n                <SystemRuleInput \r\n                    key={rule.ruleIndex} \r\n                    index={rule.ruleIndex} \r\n                    rule={rule} \r\n                    handleChange={this.props.formHandler}\r\n                />\r\n            );\r\n        });\r\n\r\n        const iterationsDropDown = [];\r\n        for (let ii = 1; ii <= 20; ii++) {\r\n            iterationsDropDown.push(\r\n                <option key={ii} value={ii}>{ii}</option>\r\n            );\r\n            \r\n        }\r\n\r\n        return (\r\n            <div> \r\n            <table align=\"center\">\r\n                <tbody>                \r\n                    <tr>\r\n                        <td title={DescriptionStrings.iterations}>Iterations</td>\r\n                        <td title={DescriptionStrings.axiom}>Axiom</td>\r\n                        <td title={DescriptionStrings.facing}>Initial Facing</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <select title={DescriptionStrings.iterations} value={this.props.ruleState.iterations} className=\"iterations\" onChange={this.props.formHandler}>\r\n                                {iterationsDropDown}\r\n                            </select>\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"Text\" className=\"axiom\" title={DescriptionStrings.axiom} value={this.props.ruleState.axiom} onChange={this.props.formHandler}/>\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"Number\" max={360} min={-360} className=\"facing\" title={DescriptionStrings.facing} value={this.props.ruleState.facing} onChange={this.props.formHandler}/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td title={DescriptionStrings.symbol}>\r\n                            Symbol\r\n                        </td>\r\n                        <td title={DescriptionStrings.replacementRule}>\r\n                            Replacement Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRule}>\r\n                            Draw Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRuleParameterHeader}>\r\n                            Draw Rule <br/> Parameter\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {ruleInputs}\r\n\r\n                    <tr>\r\n                        <td>\r\n\r\n                        </td>\r\n                        <td>\r\n                            <button onClick={this.props.handleDrawButton}>Draw System</button>\r\n                        </td>\r\n                        <td>\r\n                            <button onClick={this.props.addRuleHandler}>New Rule</button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table>\r\n\r\n            \r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRulePane;","import React from 'react'\r\nimport SampleSystems from '../data/SampleSystems'\r\n\r\nclass SystemSelector extends React.Component{\r\n\r\n    render(){\r\n        let systemSelections =[];\r\n        SampleSystems.sampleSystems.forEach((element)=>{\r\n            systemSelections.push(\r\n                <option key={element.displayName}> {element.displayName}</option>\r\n            );\r\n        });\r\n        \r\n        return (\r\n            <div>\r\n                <select className=\"ruleState\" value={this.props.displayName} onChange={this.props.loadSystem}>\r\n                    {systemSelections}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SystemSelector;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport SystemRulePane from './SystemRulePane';\r\nimport SystemSelector from './SystemSelector';\r\n\r\nclass ControlPane extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Control-pane\">\r\n                <header className=\"App-header\">\r\n                    <p style={{ textAlign: 'center'}}>\r\n                        Welcome to Nielson's Lindenmayer System Viewer\r\n                    </p>\r\n                </header>\r\n                <p>\r\n                    A Lindenmayer System, or L-System, is a system for generating strings that can be interpreted as geometric shapes.\r\n                </p><p>\r\n                    Mouse over an input option to get an explanation of its purpose. For a greater understanding of L-Systems, see <a href=\"https://en.wikipedia.org/wiki/L-system\">Wikipedia</a>\r\n                </p>\r\n                <SystemRulePane\r\n                    className = \"System-rule-pane\"\r\n                    handleDrawButton={this.props.handleDrawButton} \r\n                    ruleState={this.props.ruleState} \r\n                    formHandler={this.props.formHandler} \r\n                    addRuleHandler={this.props.addRuleHandler}\r\n                />\r\n                \r\n                <SystemSelector\r\n                    displayName = {this.props.ruleState.displayName}\r\n                    loadSystem={this.props.loadSystem}\r\n                ></SystemSelector>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPane;\r\n","import React from 'react';\r\nimport ViewPane from './ViewPane';\r\nimport ControlPane from './ControlPane';\r\n\r\nimport SampleSystems from '../data/SampleSystems.json';\r\n\r\nclass LSystemPane extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            ruleState: SampleSystems.sampleSystems[0]\r\n        }\r\n        \r\n        this.handleDrawButton = this.handleDrawButton.bind(this);\r\n        this.addRuleHandler = this.addRuleHandler.bind(this);\r\n        this.handleForm = this.handleForm.bind(this);\r\n        this.editSymbolRule = this.editSymbolRule.bind(this);\r\n        this.getSystemByDisplayName = this.getSystemByDisplayName.bind(this);\r\n        this.loadSystem = this.loadSystem.bind(this);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"app\">\r\n                <ControlPane \r\n                    handleDrawButton={this.handleDrawButton} \r\n                    ruleState={this.state.ruleState} \r\n                    formHandler={this.handleForm}\r\n                    addRuleHandler={this.addRuleHandler}\r\n                    loadSystem={this.loadSystem}\r\n                ></ControlPane>\r\n                <ViewPane ref=\"viewPane\"\r\n                    ruleState={this.state.ruleState}\r\n                ></ViewPane>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleDrawButton(){\r\n        this.refs.viewPane.updateCanvas();\r\n    }\r\n\r\n    handleForm(e){\r\n        e.persist();\r\n        if ([\"symbol\", \"replacementRule\"].includes(e.target.className)){\r\n            this.editSymbolRule(e);\r\n        }\r\n        else if([\"drawRuleType\",\"drawRuleValue\"].includes(e.target.className)){\r\n            this.editDrawRule(e);\r\n        }\r\n        else if([\"axiom\", \"iterations\",\"facing\"].includes(e.target.className)){\r\n            this.setState(prevState => ({\r\n                ruleState:{\r\n                    ...prevState.ruleState,\r\n                [e.target.className] : e.target.value\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    editSymbolRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n        let index = parseInt(e.target.id, 10);\r\n        \r\n        let changedRule = this.findRuleByIndex(rules, index);\r\n        changedRule = {\r\n            ...changedRule,\r\n            [e.target.className]:e.target.value\r\n        }\r\n\r\n        let newRules = rules;\r\n        newRules.splice(index, 1, changedRule);\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                symbolRules: newRules                    \r\n            }\r\n        }));\r\n    }\r\n\r\n    editDrawRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n        let index = parseInt(e.target.id, 10);\r\n\r\n        let changedRule = this.findRuleByIndex(rules, index);\r\n        let drawRule = changedRule.drawRule;\r\n        if (\"drawRuleType\"===e.target.className){\r\n            let defaultValue = e.target.value === \"Move\" ? 10 : 90;\r\n            drawRule = {\r\n                type : e.target.value,\r\n                value : defaultValue,\r\n            }\r\n        }\r\n        else{\r\n            let newValue = e.target.value ? parseInt(e.target.value, 10) : 0;\r\n            drawRule = {\r\n                ...drawRule,\r\n                value: newValue\r\n            }\r\n        }\r\n\r\n        changedRule = {\r\n            ...changedRule,\r\n            drawRule:drawRule\r\n        }\r\n\r\n        let newRules = rules;\r\n        newRules.splice(index, 1, changedRule);\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                symbolRules: newRules                    \r\n            }}));\r\n    }\r\n\r\n    addRuleHandler(e){\r\n        let rules = this.state.ruleState.symbolRules;\r\n        let newRule = this.getNewRule(rules);\r\n        rules.push(newRule);\r\n\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                    symbolRules : rules\r\n            }\r\n        }));\r\n    }\r\n\r\n    findRuleByIndex(rules, index){\r\n        const resultRule = rules.find((rule)=>{return rule.ruleIndex === index});\r\n        return resultRule;\r\n    }\r\n\r\n    getSystemByDisplayName(e){\r\n        const resultSystem = SampleSystems.sampleSystems.find((system)=> {return system.displayName === e.target.value});\r\n        return resultSystem;\r\n    }\r\n\r\n    loadSystem(e){\r\n        let ruleState = this.getSystemByDisplayName(e);\r\n        this.setState({ruleState:ruleState}, this.handleDrawButton);\r\n    }\r\n\r\n    getNewRule(rules){\r\n        let nextIndex = rules.length;\r\n        return {\r\n            ruleIndex: nextIndex,\r\n            symbol: '',\r\n            replacementRule:\"\",\r\n            drawRule: {type:\"None\"}\r\n        }\r\n    }\r\n}\r\n\r\nexport default LSystemPane;\r\n","import React from 'react';\nimport LSystemPane from './components/LSystemPane';\n\nfunction App() {\n  return (\n    <LSystemPane className=\"L-system-pane\"/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
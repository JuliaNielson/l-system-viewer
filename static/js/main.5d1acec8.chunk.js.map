{"version":3,"sources":["Turtle/Turtle.js","components/ViewPane.js","components/SystemRuleInput.js","components/SystemRulePane.js","components/ControlPane.js","components/LSystemPane.js","App.js","serviceWorker.js","index.js"],"names":["Turtle","props","state","lastX","maxX","minX","lastY","maxY","minY","facing","getPath","bind","degrees","Math","PI","rules","symbol","resultRule","find","rule","drawRule","ruleString","result","Path2D","this","moveTo","split","forEach","charr","nextType","findDrawRuleBySymbol","ruleState","symbolRules","newX","cos","getAsRadians","newY","sin","lineTo","setState","width","height","React","Component","ViewPane","message","updateCanvas","generateString","canvas","refs","ctx","getContext","p","translate","stroke","replacementRule","axiom","iterations","parseInt","resultString","ii","workString","length","findReplacementRuleBySymbol","breakk","className","id","ref","SystemRuleInput","ruleSelections","ruleType","push","key","value","type","title","DescriptionStrings","maxLength","index","onChange","handleChange","SystemRulePane","handleDrawSystem","handleDrawButton","ruleIndex","formHandler","iterationsDropDown","align","onClick","addRuleHandler","ControlPane","style","textAlign","LSystemPane","handleForm","editSymbolRule","document","body","classList","add","viewPane","e","persist","includes","target","prevState","changedRule","findRuleByIndex","newRules","splice","newRule","getNewRule","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5d1acec8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Turtle extends React.Component{\r\n    constructor(props)\r\n    {   \r\n        super(props);\r\n        this.state = {\r\n            lastX:320, \r\n            maxX:320, \r\n            minX:320,\r\n            lastY:320, \r\n            maxY:320, \r\n            minY:320,\r\n            facing:-90\r\n        }\r\n\r\n        this.getPath = this.getPath.bind(this);\r\n    }\r\n\r\n    getAsRadians(degrees){\r\n        return(degrees * Math.PI/180);\r\n    }\r\n\r\n    findDrawRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.drawRule : \"\";\r\n    }\r\n\r\n    getPath(ruleString){\r\n        let result = new Path2D();\r\n        let facing = this.state.facing;\r\n        let lastX = this.state.lastX;\r\n        let lastY = this.state.lastY;\r\n        let maxX = this.state.maxX;\r\n        let minX = this.state.minX;\r\n        let maxY = this.state.maxY;\r\n        let minY = this.state.minY;\r\n        result.moveTo(lastX, lastY);\r\n        ruleString.split(\"\").forEach((charr) => {\r\n            let nextType = this.findDrawRuleBySymbol(this.props.ruleState.symbolRules, charr);\r\n            if(\"None\" === nextType){\r\n                //no-op\r\n            }\r\n            else if(\"AnglePos\" === nextType){\r\n                facing += 90;\r\n            }\r\n            else if(\"AngleNeg\" === nextType){\r\n                facing -= 90;\r\n            }\r\n            else if(\"Move\" === nextType){\r\n                let newX = lastX + (10 * Math.cos(this.getAsRadians(facing)));\r\n                let newY = lastY + (10 * Math.sin(this.getAsRadians(facing)));\r\n\r\n                result.lineTo(newX, newY);\r\n                lastX = newX;\r\n                lastY = newY;\r\n\r\n                if (newX > maxX){\r\n                    maxX = newX;\r\n                }\r\n                else if(newX<minX){\r\n                    minX = newX;\r\n                }\r\n                if(newY > maxY){\r\n                    maxY = newY;\r\n                }\r\n                else if(newY < minY){\r\n                    minY = newY;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            facing:facing, \r\n            lastX:lastX, \r\n            lastY:lastY, \r\n            maxX:maxX, \r\n            minX:minX, \r\n            maxY:maxY, \r\n            minY:minY\r\n        });\r\n\r\n        minX = minX - 20;\r\n        minY--;\r\n        let width = maxX - minX + 20 ;\r\n        let height = maxY - minY + 20;\r\n\r\n        return {result, minX, minY, width, height};\r\n    }\r\n\r\n}\r\n\r\nexport default Turtle;","import React from 'react';\r\nimport '../App.css';\r\nimport Turtle from '../Turtle/Turtle';\r\n\r\nclass ViewPane extends React.Component {\r\n    constructor(props){\r\n        //props.ruleState;\r\n        super(props);\r\n        this.state = {\r\n            message: \"\"\r\n        }\r\n\r\n        this.updateCanvas = this.updateCanvas.bind(this);\r\n        this.generateString = this.generateString.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas(){\r\n        let ruleString = this.generateString();\r\n\r\n        const canvas = this.refs.canvas;\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        if (ruleString)\r\n        {\r\n            let turtle = new Turtle(this.props);\r\n            let p = turtle.getPath(ruleString);\r\n            canvas.width = p.width;\r\n            canvas.height = p.height;\r\n            ctx.translate(p.minX*-1, p.minY*-1);\r\n            ctx.stroke(p.result);\r\n        }\r\n        \r\n    }\r\n    \r\n    // fitToContainer(canvas){\r\n    //     const viewDiv = document.getElementById(\"viewPane\");\r\n    //     canvas.width = viewDiv.offsetWidth;\r\n    //     canvas.height = viewDiv.offsetHeight;\r\n\r\n    // }\r\n\r\n    findReplacementRuleBySymbol(rules, symbol){\r\n        const resultRule = rules.find((rule)=>{return rule.symbol === symbol});\r\n        return resultRule ? resultRule.replacementRule : symbol;\r\n    }\r\n    \r\n    generateString(){\r\n        const rules = this.props.ruleState.symbolRules;\r\n        const axiom = this.props.ruleState.axiom;\r\n        const iterations = parseInt(this.props.ruleState.iterations);\r\n        let resultString = axiom;\r\n        for (let ii = 0; ii < iterations; ii++) {\r\n            let workString = \"\";\r\n            if (resultString.length < 250000)\r\n            {\r\n                resultString.split(\"\").forEach(charr => {\r\n                    workString += this.findReplacementRuleBySymbol(rules, charr);\r\n                });\r\n\r\n                resultString = workString;\r\n            }\r\n            else{\r\n                this.setState({\r\n                    message: \"That drawing may cause your browser to slow down, so it was canceled instead. Try using a smaller value for the iterations.\"\r\n                });\r\n                return axiom;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            ruleString: resultString,\r\n            message: \"\"\r\n        });\r\n\r\n        return resultString;\r\n    }\r\n    \r\n    render(){\r\n        let breakk = this.state.message === null ? \"\" : <br/>;\r\n        return (\r\n            <div className=\"View-pane\" id=\"viewPane\">\r\n                {this.state.message}\r\n                {breakk}\r\n                <canvas ref=\"canvas\">\r\n                Your browser does not support the HTML5 canvas tag or you're looking at a search engine preview or something.\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewPane;\r\n","import React, {Component} from 'react';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\nclass SystemRuleInput extends Component{\r\n\r\n    render(){\r\n        let ruleTypes =[\"Move\", \"AnglePos\", \"AngleNeg\", \"None\"]\r\n        let ruleSelections = [];\r\n        ruleTypes.forEach((ruleType)=>{\r\n            ruleSelections.push(\r\n              <option key={ruleType} value={ruleType}>{ruleType}</option>  \r\n            );\r\n        });\r\n\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    <input type=\"Text\" className=\"symbol\" title={DescriptionStrings.symbol} maxLength=\"1\" id={this.props.index} value={this.props.rule.symbol} onChange = {this.props.handleChange}/>\r\n                </td>\r\n                <td>\r\n                    <input type=\"Text\" className=\"replacementRule\" title={DescriptionStrings.replacementRule} id={this.props.index} value={this.props.rule.replacementRule} onChange = {this.props.handleChange}/>\r\n                </td>\r\n                <td>\r\n                    <select className=\"drawRule\" id={this.props.index} title={DescriptionStrings.drawRule} value={this.props.rule.drawRule} onChange={this.props.handleChange}>\r\n                        {ruleSelections}\r\n                    </select>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRuleInput;","import React, {Component} from 'react';\r\nimport SystemRuleInput from './SystemRuleInput';\r\nimport DescriptionStrings from '../data/DescriptionStrings.json'\r\n\r\n\r\nclass SystemRulePane extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.handleDrawSystem = this.handleDrawSystem.bind(this);\r\n    }\r\n\r\n    handleDrawSystem(){\r\n        this.props.handleDrawButton();\r\n    }\r\n\r\n    render(){\r\n        const rules = [];\r\n\r\n        this.props.ruleState.symbolRules.forEach((rule)=>{\r\n            rules.push(\r\n                <SystemRuleInput \r\n                    key={rule.ruleIndex} \r\n                    index={rule.ruleIndex} \r\n                    rule={rule} \r\n                    handleChange={this.props.formHandler}\r\n                />\r\n            );\r\n\r\n        });\r\n\r\n        const iterationsDropDown = [];\r\n        for (let ii = 1; ii <= 20; ii++) {\r\n            iterationsDropDown.push(\r\n                <option key={ii} value={ii}>{ii}</option>\r\n            );\r\n            \r\n        }\r\n\r\n        return (\r\n            <div> \r\n            <table align=\"center\">\r\n                <tbody>                \r\n                    <tr>\r\n                        <td title={DescriptionStrings.axiom}>Axiom</td>\r\n                        <td title={DescriptionStrings.iterations}>Iterations</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <input type=\"Text\" className=\"axiom\" title={DescriptionStrings.axiom} value={this.props.ruleState.axiom} onChange={this.props.formHandler}/>\r\n                        </td>\r\n                        <td>\r\n                            <select title={DescriptionStrings.iterations} value={this.props.ruleState.iterations} className=\"iterations\" onChange={this.props.formHandler}>\r\n                                {iterationsDropDown}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td title={DescriptionStrings.symbol}>\r\n                            Symbol\r\n                        </td>\r\n                        <td title={DescriptionStrings.replacementRule}>\r\n                            Replacement Rule\r\n                        </td>\r\n                        <td title={DescriptionStrings.drawRule}>\r\n                            Draw Rule\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {rules}\r\n\r\n                    <tr>\r\n                        <td>\r\n                            <button onClick={this.props.addRuleHandler}>New Rule</button>\r\n                        </td>\r\n                        <td>\r\n                            <button onClick={this.handleDrawSystem}>Draw System</button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table>\r\n\r\n            \r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemRulePane;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport SystemRulePane from './SystemRulePane';\r\n\r\nclass ControlPane extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Control-pane\">\r\n                <header className=\"App-header\">\r\n                    <p style={{ textAlign: 'center'}}>\r\n                        Welcome to Nielson's Lindenmayer System Viewer\r\n                    </p>\r\n                </header>\r\n                <p>\r\n                    Mouse over an input option to get an explanation of its purpose. For a greater understanding of L-Systems, see\r\n                </p>\r\n                <SystemRulePane\r\n                    className = \"System-rule-pane\"\r\n                    handleDrawButton={this.props.handleDrawButton} \r\n                    ruleState={this.props.ruleState} \r\n                    formHandler={this.props.formHandler} \r\n                    addRuleHandler={this.props.addRuleHandler}\r\n                />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPane;\r\n","import React from 'react';\r\nimport ViewPane from './ViewPane';\r\nimport ControlPane from './ControlPane';\r\n\r\nclass LSystemPane extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            ruleState: {\r\n                symbolRules: [{\r\n                    ruleIndex: 0,\r\n                    symbol: 'a',\r\n                    replacementRule:\"ebcdacadcbe\",\r\n                    drawRule:\"None\"\r\n                },{\r\n                    ruleIndex: 1,\r\n                    symbol: 'b',\r\n                    replacementRule:\"dacebcbecad\",\r\n                    drawRule:\"None\"\r\n                },{\r\n                    ruleIndex: 2,\r\n                    symbol: 'c',\r\n                    replacementRule:\"c\",\r\n                    drawRule:\"Move\"\r\n                },{\r\n                    ruleIndex: 3,\r\n                    symbol: 'd',\r\n                    replacementRule:\"d\",\r\n                    drawRule:\"AnglePos\"\r\n                },{\r\n                    ruleIndex: 4,\r\n                    symbol: 'e',\r\n                    replacementRule:\"e\",\r\n                    drawRule:\"AngleNeg\"\r\n                }],\r\n                axiom : \"a\",\r\n                iterations : 5\r\n            },\r\n            ruleString : \"\"\r\n        }\r\n        this.handleDrawButton = this.handleDrawButton.bind(this);\r\n        this.addRuleHandler = this.addRuleHandler.bind(this);\r\n        this.handleForm = this.handleForm.bind(this);\r\n        this.editSymbolRule = this.editSymbolRule.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.body.classList.add(\"Body-format\");\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className = \"app\">\r\n                <ControlPane \r\n                    handleDrawButton={this.handleDrawButton} \r\n                    ruleState={this.state.ruleState} \r\n                    formHandler={this.handleForm}\r\n                    addRuleHandler={this.addRuleHandler}\r\n                ></ControlPane>\r\n                <ViewPane ref=\"viewPane\"\r\n                    ruleString={this.state.ruleString} \r\n                    ruleState={this.state.ruleState}\r\n                ></ViewPane>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleDrawButton(){\r\n        \r\n        this.refs.viewPane.updateCanvas();\r\n    }\r\n\r\n    findRuleByIndex(rules, index){\r\n        const resultRule = rules.find((rule)=>{return rule.ruleIndex === index});\r\n        return resultRule;\r\n    }\r\n\r\n    handleForm(e){\r\n        e.persist();\r\n        if ([\"symbol\", \"replacementRule\", \"drawRule\"].includes(e.target.className)){\r\n            this.editSymbolRule(e);\r\n        }\r\n        else if([\"axiom\", \"iterations\"].includes(e.target.className)){\r\n            this.setState(prevState => ({\r\n                ruleState:{\r\n                    ...prevState.ruleState,\r\n                [e.target.className] : e.target.value\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    editSymbolRule(e){\r\n        let rules = [...this.state.ruleState.symbolRules];\r\n            let index = parseInt(e.target.id, 10);\r\n\r\n            let changedRule = this.findRuleByIndex(rules, index);\r\n            changedRule = {\r\n                ...changedRule,\r\n                [e.target.className]:e.target.value\r\n            }\r\n\r\n            let newRules = rules;\r\n            newRules.splice(index, 1, changedRule);\r\n            this.setState(prevState => ({\r\n                ruleState:{\r\n                    ...prevState.ruleState,\r\n                    symbolRules: newRules                    \r\n                }\r\n            }));\r\n    }\r\n    //consider always having an empty new rule and doing away with the button\r\n    addRuleHandler(e){\r\n        let rules = this.state.ruleState.symbolRules;\r\n        let newRule = this.getNewRule(rules);\r\n        rules.push(newRule);\r\n\r\n        this.setState(prevState => ({\r\n            ruleState:{\r\n                ...prevState.ruleState,\r\n                    symbolRules : rules\r\n            }\r\n        }));\r\n    }\r\n\r\n    getNewRule(rules){\r\n        let nextIndex = rules.length;\r\n        return {\r\n            ruleIndex: nextIndex,\r\n            symbol: '',\r\n            replacementRule:\"\",\r\n            drawRule:\"None\"\r\n        }\r\n    }\r\n}\r\n\r\nexport default LSystemPane;\r\n","import React from 'react';\nimport LSystemPane from './components/LSystemPane';\n\nfunction App() {\n  return (\n    <LSystemPane className=\"L-system-pane\"/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}